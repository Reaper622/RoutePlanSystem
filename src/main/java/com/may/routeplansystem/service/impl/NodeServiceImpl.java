package com.may.routeplansystem.service.impl;import com.may.routeplansystem.constant.StatusCode;import com.may.routeplansystem.dao.NodeDao;import com.may.routeplansystem.pojo.NodePojo;import com.may.routeplansystem.service.NodeService;import com.may.routeplansystem.util.ResponseUtil;import org.apache.http.HttpEntity;import org.apache.http.HttpResponse;import org.apache.http.client.methods.HttpGet;import org.apache.http.client.utils.URIBuilder;import org.apache.http.impl.client.CloseableHttpClient;import org.apache.http.impl.client.HttpClients;import org.apache.http.util.EntityUtils;import org.apache.poi.ss.usermodel.Workbook;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.web.multipart.MultipartFile;import javax.servlet.http.HttpSession;import java.io.File;import java.net.URI;/** * @author:dengsiyuan * @Date:2018/10/22 16:28 */@Servicepublic class NodeServiceImpl implements NodeService {    private Logger logger = LoggerFactory.getLogger(this.getClass());    @Autowired    private NodeDao nodeDao;    /**     * 判断文件类型     * @param fileName     * @param mFile     * @param session     * @return 返回文件判断结果     */    @Override    public String batchImport(String fileName, MultipartFile mFile, HttpSession session) {        return null;    }    /**     * 导入数据，并返回结果     *     * @param wb     * @param tempFile     * @return 返回具体导入结果     */    @Override    public String readExcel(Workbook wb, File tempFile) {        return null;    }    /**     * 通过点击地图导入点信息     *     * @param nodePojo     * @return -1 失败     */    @Override    public int insertNode(NodePojo nodePojo) {        NodePojo node;        try {            if(nodePojo.getLat() == 0 || nodePojo.getLng() == 0) {                URI uri = new URIBuilder()                        .setScheme("http")                        .setHost("api.map.baidu.com")                        .setPath("/geocoder/v2/")                        .setParameter("address", nodePojo.getNodeAddress())                        .setParameter("output", "json")                        .setParameter("ak", "T558r6l2fgG7DNIItH0GVHLpC96KP770")                        .setParameter("callback", "showLocation")                        .build();                CloseableHttpClient httpClient = HttpClients.createDefault();                //创建get请求对象                HttpGet httpGet = new HttpGet(uri);                //发送请求，获得response                HttpResponse response = httpClient.execute(httpGet);                //处理响应                ResponseUtil responseUtil = new ResponseUtil();                node = responseUtil.getLatLng(response, nodePojo);                if(node != null){                    if(nodeDao.insertNode(node) != -1){                        return StatusCode.SUCCESS;                    }else {                        return StatusCode.MESSAGE_ERROR;                    }                }else {                    return StatusCode.CODE_FAIL;                }            }else {                if(nodeDao.insertNode(nodePojo) != -1){                    return StatusCode.SUCCESS;                }else {                    return StatusCode.MESSAGE_ERROR;                }            }        }catch (Exception e){            logger.error(e.getClass()+"{}",e);            return StatusCode.FAIL;        }    }    /**     * 删除点     * @param nodePojo     * @return 1:删除成功 2: 删除失败 0: 异常 4:null     */    @Override    public int deleteNode(NodePojo nodePojo) {        try {            if(nodePojo.getNodeId() != 0){                if(nodeDao.deleteNodeByNodeId(nodePojo.getNodeId())){                    return StatusCode.SUCCESS;                }else {                    return StatusCode.MESSAGE_ERROR;                }            }else if(nodePojo.getQuestionId() != 0){                if(nodeDao.deleteNodeByQuestionId(nodePojo.getQuestionId())){                    return StatusCode.SUCCESS;                }else {                    return StatusCode.MESSAGE_ERROR;                }            }else {                return StatusCode.MESSAGE_NULL;            }        }catch (Exception e){            logger.error(e.getClass()+"{}",e);            return StatusCode.FAIL;        }    }    /**     * 更新点     * @param nodePojo     * @return 1:更新成功 2: 更新失败 0: 异常 4:null     */    @Override    public int updateNode(NodePojo nodePojo) {        try {            if (nodePojo != null) {                if (nodeDao.updateNodeByNodeId(nodePojo.getNodeId())) {                    return StatusCode.SUCCESS;                } else {                    return StatusCode.MESSAGE_ERROR;                }            }else {                return StatusCode.MESSAGE_NULL;            }        }catch (Exception e){            logger.error(e.getClass()+"{}",e);            return StatusCode.FAIL;        }    }    /**     * 查询点的信息     *     * @param nodePojo     * @return nodePojo     */    @Override    public Object selectNode(NodePojo nodePojo) {        try {            int nodeId = nodePojo.getNodeId();            String nodeName = nodePojo.getNodeName();            if(nodeId != 0){                nodePojo = nodeDao.selectNodeByNodeId(nodeId);                if(nodePojo != null){                    return nodePojo;                }else {                    return StatusCode.MESSAGE_ERROR;                }            }else if(nodeName != null){                nodePojo = nodeDao.selectNodeByNodeName(nodeName);                if(nodePojo != null){                    return nodeDao.selectNodeByNodeName(nodeName);                }else {                    return StatusCode.MESSAGE_ERROR;                }            }else {                return StatusCode.MESSAGE_NULL;            }        }catch (Exception e){            logger.error(e.getClass()+"{}",e);            return StatusCode.FAIL;        }    }}