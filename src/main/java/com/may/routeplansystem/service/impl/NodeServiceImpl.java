package com.may.routeplansystem.service.impl;import com.may.routeplansystem.constant.ProcessState;import com.may.routeplansystem.dao.NodeDao;import com.may.routeplansystem.dao.QuestionDao;import com.may.routeplansystem.entity.po.Question;import com.may.routeplansystem.exception.ParameterException;import com.may.routeplansystem.exception.ProcessException;import com.may.routeplansystem.node_excel_check.NodeExcelCheck;import com.may.routeplansystem.node_excel_read.NodeExcelRead;import com.may.routeplansystem.entity.po.NodePojo;import com.may.routeplansystem.service.NodeService;import com.may.routeplansystem.service.util.ServiceUtil;import lombok.extern.slf4j.Slf4j;import org.apache.poi.ss.usermodel.Workbook;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Value;import org.springframework.context.ApplicationContext;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.multipart.MultipartFile;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import java.util.List;import java.util.Objects;/** * @author:dengsiyuan * @Date:2018/10/22 16:28 */@Service@Slf4jpublic class NodeServiceImpl implements NodeService {    private Logger logger = LoggerFactory.getLogger(this.getClass());    @Resource    private NodeDao nodeDao;    @Resource    private BatchImportService batchImportService;    @Resource    private QuestionDao questionDao;    @Resource    private ApplicationContext applicationContext;    @Value("${excel.node_read}")    private String nodeReadVersion;    @Value("${excel.node_check}")    private String nodeCheckVersion;    @Override    @Transactional(rollbackFor = Exception.class)    public void nodeBatchImport(MultipartFile file, HttpServletRequest request, int questionId) {        batchImportService.batchImport(file, request, questionId, this::readExcelToDatabase);    }    private void readExcelToDatabase(Workbook wb, int questionId) {        checkExcel(wb);        NodeExcelRead nodeExcelRead = (NodeExcelRead) applicationContext.getAutowireCapableBeanFactory()                .getBean(this.nodeReadVersion);        List<NodePojo> nodes = nodeExcelRead.read(wb, questionId);        boolean loadFlag = nodes.stream().allMatch(nodeDao::insertNode);        boolean updateStateFlag = questionDao.updateQuestionProcessState(ProcessState.LOAD_NODE, questionId);        ServiceUtil.checkSqlExecuted(loadFlag && updateStateFlag);    }    private void checkExcel(Workbook workbook) {        NodeExcelCheck nodeExcelCheck= (NodeExcelCheck) applicationContext.getAutowireCapableBeanFactory()                .getBean(this.nodeCheckVersion);        nodeExcelCheck.check(workbook);    }    @Override    @Transactional(rollbackFor = Exception.class)    public void insertNode(NodePojo nodePojo) {        questioCheck(nodePojo.getQuestionId());        boolean flag = nodeDao.insertNode(nodePojo);        boolean updateProcessStateFlag = questionDao.                updateQuestionProcessState(ProcessState.LOAD_NODE, nodePojo.getQuestionId());        ServiceUtil.checkSqlExecuted(flag && updateProcessStateFlag);    }    private void questioCheck(int questionId) {        Question question = questionDao.findQuestionByQuestionId(questionId);        if (question == null) {            throw new ProcessException("请先创建问题");        }        if (question.getProcessState() < ProcessState.LOAD_VEHICLE) {            throw new ProcessException("请先导入车辆");        }    }    @Override    public void deleteNode(NodePojo nodePojo) {            if (nodePojo.getNodeId() != 0) {                boolean flag = nodeDao.deleteNodeByNodeId(nodePojo.getNodeId());                ServiceUtil.checkSqlExecuted(flag);            } else if (nodePojo.getQuestionId() != 0) {                boolean flag = nodeDao.deleteNodeByQuestionId(nodePojo.getQuestionId());                ServiceUtil.checkSqlExecuted(flag);            } else {                throw new ParameterException("请传输正确的删除点的数据");            }    }    @Override    public void updateNode(NodePojo nodePojo) {        Objects.requireNonNull(nodePojo, "服务点或者中心点数据为空");        boolean flag = nodeDao.updateNodeByNodeId(nodePojo);        ServiceUtil.checkSqlExecuted(flag);    }    @Override    public List<NodePojo> getQuestionNodes(int questionId) {        List<NodePojo> nodes = nodeDao.selectAllNodes(questionId);        return nodes;    }}