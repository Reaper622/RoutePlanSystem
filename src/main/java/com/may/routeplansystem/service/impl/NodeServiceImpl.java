package com.may.routeplansystem.service.impl;import com.may.routeplansystem.constant.StatusCode;import com.may.routeplansystem.dao.NodeDao;import com.may.routeplansystem.pojo.NodePojo;import com.may.routeplansystem.service.DistanceService;import com.may.routeplansystem.service.NodeService;import com.may.routeplansystem.util.ExcelUtil;import com.may.routeplansystem.util.ResponseUtil;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang.StringUtils;import org.apache.http.HttpResponse;import org.apache.http.client.methods.HttpGet;import org.apache.http.client.utils.URIBuilder;import org.apache.http.impl.client.CloseableHttpClient;import org.apache.http.impl.client.HttpClients;import org.apache.poi.hssf.usermodel.HSSFWorkbook;import org.apache.poi.ss.usermodel.Cell;import org.apache.poi.ss.usermodel.Row;import org.apache.poi.ss.usermodel.Sheet;import org.apache.poi.ss.usermodel.Workbook;import org.apache.poi.xssf.usermodel.XSSFWorkbook;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.web.multipart.MultipartFile;import javax.servlet.http.HttpServletRequest;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStream;import java.net.URI;import java.util.ArrayList;import java.util.List;/** * @author:dengsiyuan * @Date:2018/10/22 16:28 */@Service@Slf4jpublic class NodeServiceImpl implements NodeService {    private Logger logger = LoggerFactory.getLogger(this.getClass());    @Autowired    private NodeDao nodeDao;    @Autowired    private NodeService nodeService;    @Autowired    private DistanceService distanceService;    private String log1,log2,log3,log4;    /**     * 判断文件类型     * @param fileName     * @param mFile     * @param request     * @return 返回文件判断结果     */    @Override    public String batchImport(String fileName, MultipartFile mFile, HttpServletRequest request, String user, int questionId) {        String filePath = System.getProperties().getProperty("user.dir");        filePath=filePath.replace("RoutePlanSystem", "");        String result = null;//        String user = (String) request.getSession().getAttribute("user");        try {//            if (user != null) {//                log1 = "用户" + user + "使用";                File uploadDir = new File(filePath + user);                //判断是否存在，不存在即创建                if (!uploadDir.exists()) {                    uploadDir.mkdirs();                }                File tempFile = new File(filePath + user + File.separator + System.currentTimeMillis() + ".xlsx");                //初始化输入流                InputStream is = null;                try {                    //将上传的文件写入新的文件中                    mFile.transferTo(tempFile);                    //根据新建的文件实例化输入法                    is = new FileInputStream(tempFile);                    //根据版本选择创建Workbook的方式                    Workbook wb = null;                    //判断是2003还是2007                    if (ExcelUtil.isExcel2003(fileName)) {                        log1 += "2003版";                        wb = new HSSFWorkbook(is);                    } else if (ExcelUtil.isExcel2007(fileName)) {                        log1 += "2007版";                        wb = new XSSFWorkbook(is);                    } else {                        //不符合要求的文件类型                        result = "文件类型不符合要求，请重新选择";                    }                    log1 += "申请导入：";                    result = readExcel(wb,tempFile, questionId);                } catch (Exception e) {                    e.printStackTrace();                } finally {                    if (is != null) {                        try {                            is.close();                        } catch (IOException e) {                            is = null;                            e.printStackTrace();                        }                    }                }        }catch (Exception e){            result = e.getMessage();        }        return result;    }    /**     * 导入数据，并返回结果     *     * @param wb     * @param tempFile     * @return 返回具体导入结果     */    @Override    public String readExcel(Workbook wb, File tempFile, int questionId) {        //错误信息接收器        String errorMsg = "";        //得到第一个sheet        Sheet sheet = wb.getSheetAt(0);        //得到sheet中的行数        int totalRows = sheet.getPhysicalNumberOfRows();        //总列数        int totalCells = 0;        //得到sheet的列数,从第2行起        if(totalRows >= 2 && sheet.getRow(1) != null){            totalCells = sheet.getRow(1).getPhysicalNumberOfCells();            log2 = "共有" + totalRows + "行" + totalCells + "列";        }        List<NodePojo> nodePojoList = new ArrayList<NodePojo>(16);        //循环excel行数，从第二行开始（标题不入库）        for (int r = 1;r <totalRows; r++){            NodePojo nodePojo = new NodePojo();            nodePojo.setQuestionId(questionId);            String rowMessage = "";            Row row = sheet.getRow(r);            String nodeName = "";            String nodeAddress = "";            int isCenter = 0;            //循环Excel的列            for(int c = 0; c <totalCells; c++){                Cell cell = row.getCell(c);                if (c == 0) {                    nodeName = cell.getStringCellValue();                    if (StringUtils.isEmpty(nodeName)) {                        rowMessage += "地点标识不能为空；";                    } else if (nodeName.length() > 20) {                        rowMessage += "地点标识的字数不能超过20；";                    } else {                        nodePojo.setNodeName(nodeName);                    }                } else if (c == 1) {                    nodeAddress = cell.getStringCellValue();                    if (StringUtils.isEmpty(nodeAddress)) {                        rowMessage += "详细地点不能为空；";                    } else if (nodeAddress.length() > 50) {                        rowMessage += "详细地点的字数不能超过50；";                    } else {                        nodePojo.setNodeAddress(nodeAddress);                    }                } else if (c == 2) {                    isCenter = (int) cell.getNumericCellValue();                    nodePojo.setIsCenter(isCenter);                }            }            //拼接每行的错误提示            if(!StringUtils.isEmpty(rowMessage)){                errorMsg += "\n第"+(r+1)+"行，"+rowMessage;                log4 = "导入失败";            }else{                nodePojoList.add(nodePojo);            }        }        //删除上传的临时文件        if(tempFile.exists()){            tempFile.delete();        }        log3 = "开始导入";        //全部验证通过才导入到数据库        if(StringUtils.isEmpty(errorMsg)){            String result = null;            for(NodePojo nodePojo1 : nodePojoList){                if(insertNode(nodePojo1) == 1){                    log4 = "导入成功";                    result = "导入成功";                }                else {                    result = "请更改后重新导入";                }            }            errorMsg += result;        }        logger.info(log1);        logger.info(log2);        logger.info(log3);        logger.info(log4);        return errorMsg;    }    /**     * 通过点击地图导入点信息     *     * @param nodePojo     * @return -1 失败     */    @Override    public int insertNode(NodePojo nodePojo) {        NodePojo node;        try {            if(nodePojo.getLat() == 0 || nodePojo.getLng() == 0) {                URI uri = new URIBuilder()                        .setScheme("http")                        .setHost("api.map.baidu.com")                        .setPath("/geocoder/v2/")                        .setParameter("address", nodePojo.getNodeAddress())                        .setParameter("output", "json")                        .setParameter("ak", "T558r6l2fgG7DNIItH0GVHLpC96KP770")                        .setParameter("callback", "showLocation")                        .build();                CloseableHttpClient httpClient = HttpClients.createDefault();                //创建get请求对象                HttpGet httpGet = new HttpGet(uri);                //发送请求，获得response                HttpResponse response = httpClient.execute(httpGet);                //处理响应                ResponseUtil responseUtil = new ResponseUtil();                distanceService.generateDistanceFromNode(nodePojo.getQuestionId());                distanceService.updateDisAndTime(nodePojo.getQuestionId());                node = responseUtil.getLatLng(response, nodePojo);                if(node != null){                    if(nodeDao.insertNode(node) != -1){                        return StatusCode.SUCCESS;                    }else {                        return StatusCode.MESSAGE_ERROR;                    }                }else {                    return StatusCode.CODE_FAIL;                }            }else {                if(nodeDao.insertNode(nodePojo) != -1){                    return StatusCode.SUCCESS;                }else {                    return StatusCode.MESSAGE_ERROR;                }            }        }catch (Exception e){            logger.error(e.getClass()+"{}",e);            return StatusCode.FAIL;        }    }    /**     * 删除点     * @param nodePojo     * @return 1:删除成功 2: 删除失败 0: 异常 4:null     */    @Override    public int deleteNode(NodePojo nodePojo) {        try {            if(nodePojo.getNodeId() != 0){                if(nodeDao.deleteNodeByNodeId(nodePojo.getNodeId())){                    return StatusCode.SUCCESS;                }else {                    return StatusCode.MESSAGE_ERROR;                }            }else if(nodePojo.getQuestionId() != 0){                if(nodeDao.deleteNodeByQuestionId(nodePojo.getQuestionId())){                    return StatusCode.SUCCESS;                }else {                    return StatusCode.MESSAGE_ERROR;                }            }else {                return StatusCode.MESSAGE_NULL;            }        }catch (Exception e){            logger.error(e.getClass()+"{}",e);            return StatusCode.FAIL;        }    }    /**     * 更新点     * @param nodePojo     * @return 1:更新成功 2: 更新失败 0: 异常 4:null     */    @Override    public int updateNode(NodePojo nodePojo) {        try {            if (nodePojo != null) {                if (nodeDao.updateNodeByNodeId(nodePojo.getNodeId())) {                    distanceService.updateDisAndTime(nodePojo.getQuestionId());                    return StatusCode.SUCCESS;                } else {                    return StatusCode.MESSAGE_ERROR;                }            }else {                return StatusCode.MESSAGE_NULL;            }        }catch (Exception e){            logger.error(e.getClass()+"{}",e);            return StatusCode.FAIL;        }    }    /**     * 查询点的信息     *     * @param nodePojo     * @return nodePojo     */    @Override    public Object selectNode(NodePojo nodePojo) {        try {            int nodeId = nodePojo.getNodeId();            String nodeName = nodePojo.getNodeName();            if(nodeId != 0){                nodePojo = nodeDao.selectNodeByNodeId(nodeId);                if(nodePojo != null){                    return nodePojo;                }else {                    return StatusCode.MESSAGE_ERROR;                }            }else if(nodeName != null){                nodePojo = nodeDao.selectNodeByNodeName(nodeName);                if(nodePojo != null){                    return nodeDao.selectNodeByNodeName(nodeName);                }else {                    return StatusCode.MESSAGE_ERROR;                }            }else {                return StatusCode.MESSAGE_NULL;            }        }catch (Exception e){            logger.error(e.getClass()+"{}",e);            return StatusCode.FAIL;        }    }}