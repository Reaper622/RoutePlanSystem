package com.may.routeplansystem.service.impl;import com.may.routeplansystem.constant.StatusCode;import com.may.routeplansystem.dao.NodeDao;import com.may.routeplansystem.pojo.NodePojo;import com.may.routeplansystem.service.NodeService;import org.apache.poi.ss.usermodel.Workbook;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.web.multipart.MultipartFile;import javax.servlet.http.HttpSession;import java.io.File;/** * @author:dengsiyuan * @Date:2018/10/22 16:28 */@Servicepublic class NodeServiceImpl implements NodeService {    private Logger logger = LoggerFactory.getLogger(this.getClass());    @Autowired    private NodeDao nodeDao;    /**     * 判断文件类型     * @param fileName     * @param mFile     * @param session     * @return 返回文件判断结果     */    @Override    public String batchImport(String fileName, MultipartFile mFile, HttpSession session) {        return null;    }    /**     * 导入数据，并返回结果     *     * @param wb     * @param tempFile     * @return 返回具体导入结果     */    @Override    public String readExcel(Workbook wb, File tempFile) {        return null;    }    /**     * 通过点击地图导入点信息     *     * @param nodePojo     * @return -1 失败     */    @Override    public int insertNode(NodePojo nodePojo) {        try {            if(nodePojo.getNodeName() != null && nodePojo.getNodeId() != 0 && nodePojo.getQuestionId() != 0 && nodePojo.getNodeAddress() != null ){                if(nodeDao.insertNode(nodePojo) != -1){                    return StatusCode.SUCCESS;                }else {                    return StatusCode.FAIL;                }            }else {                return StatusCode.MESSAGE_NULL;            }        }catch (Exception e){            logger.error(e.getClass()+"{}",e);            return StatusCode.FAIL;        }    }    /**     * 删除点     * @param nodePojo     * @return 1:删除成功 2: 删除失败 0: 异常 4:null     */    @Override    public int deleteNode(NodePojo nodePojo) {        try {            if(nodePojo.getNodeId() != 0){                if(nodeDao.deleteNodeByNodeId(nodePojo.getNodeId())){                    return StatusCode.SUCCESS;                }else {                    return StatusCode.MESSAGE_ERROR;                }            }else if(nodePojo.getQuestionId() != 0){                if(nodeDao.deleteNodeByQuestionId(nodePojo.getQuestionId())){                    return StatusCode.SUCCESS;                }else {                    return StatusCode.MESSAGE_ERROR;                }            }else if(nodePojo.getNodeName() != null){                if(nodeDao.deleteNodeByNodeName(nodePojo.getNodeName())){                    return StatusCode.SUCCESS;                }else {                    return StatusCode.MESSAGE_ERROR;                }            }else {                return StatusCode.MESSAGE_NULL;            }        }catch (Exception e){            logger.error(e.getClass()+"{}",e);            return StatusCode.FAIL;        }    }    /**     * 更新点     * @param nodeId     * @return 1:删除成功 2: 删除失败 0: 异常 4:null     */    @Override    public int updateNode(int nodeId) {        try {            if (nodeId != 0) {                if (nodeDao.updateNodeByNodeId(nodeId)) {                    return StatusCode.SUCCESS;                } else {                    return StatusCode.MESSAGE_ERROR;                }            }else {                return StatusCode.MESSAGE_NULL;            }        }catch (Exception e){            logger.error(e.getClass()+"{}",e);            return StatusCode.FAIL;        }    }    /**     * 查询点的信息     *     * @param nodePojo     * @return nodePojo     */    @Override    public NodePojo selectNode(NodePojo nodePojo) {        try {            int nodeId = nodePojo.getNodeId();            String nodeName = nodePojo.getNodeName();            if(nodeId != 0){                if(nodeDao.selectNodeByNodeId(nodeId) != null){                    return nodeDao.selectNodeByNodeId(nodeId);                }else {                    return null;                }            }else if(nodeName != null){                if(nodeDao.selectNodeByNodeName(nodeName) != null){                    return nodeDao.selectNodeByNodeName(nodeName);                }else {                    return null;                }            }else {                return null;            }        }catch (Exception e){            logger.error(e.getClass()+"{}",e);            return null;        }    }}